{
    "case_name": "test_bookDetail_02_base_element",
    "run_time": "20240523 19:25:10",
    "test_type": "BookDetailPageTest",
    "case_doc": "case2:\u9875\u9762\u7684\u57fa\u672c\u5143\u7d20\u662f\u5426\u5b58\u5728\n",
    "success": false,
    "failures": "",
    "errors": "Traceback (most recent call last):\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\miniprogram\\wx_minium.py\", line 782, in connect_dev_tool\n    self._instantiate_app()\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\miniprogram\\wx_minium.py\", line 818, in _instantiate_app\n    self._get_system_info()\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\miniprogram\\wx_minium.py\", line 499, in _get_system_info\n    system_info = self.get_system_info()\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\miniprogram\\base_driver\\minium_log.py\", line 225, in wrapper\n    result = func(*args, **kwargs)\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\miniprogram\\wx_minium.py\", line 848, in get_system_info\n    self._call_wx_method(\"getSystemInfoSync\")\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\miniprogram\\base_driver\\minium_object.py\", line 162, in _call_wx_method\n    return self.connection.send(\"App.callWxMethod\", params)\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\miniprogram\\base_driver\\connection.py\", line 447, in send\n    return self._receive_response(cmd)\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\miniprogram\\base_driver\\connection.py\", line 491, in _receive_response\n    raise MiniTimeoutError(\nminium.framework.exception.MiniTimeoutError: [5abe9545-0582-472e-bea1-9fdd12cb45dc][call App.callWxMethod] receive from remote timeout\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\miniprogram\\wx_minium.py\", line 735, in launch_dev_tool\n    self.connect_dev_tool()\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\miniprogram\\base_driver\\minium_log.py\", line 225, in wrapper\n    result = func(*args, **kwargs)\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\miniprogram\\wx_minium.py\", line 792, in connect_dev_tool\n    raise MiniConnectError(\nminium.framework.exception.MiniConnectError: three times try to connect Dev tool has all fail ...\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\framework\\libs\\unittest\\case.py\", line 266, in testPartExecutor\n    yield\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\framework\\libs\\unittest\\case.py\", line 342, in run\n    self._miniSetUp()\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\framework\\minitest.py\", line 440, in _miniSetUp\n    self.init_miniprogram()\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\framework\\minitest.py\", line 405, in init_miniprogram\n    native, mini, _ = init_miniprogram(self.__class__.CONFIG)\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\framework\\minitest.py\", line 201, in init_miniprogram\n    mini = get_minium(cfg)\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\framework\\minitest.py\", line 161, in get_minium\n    g_minium = minium.miniprogram.get_minium_driver(conf=cfg, native=g_native)\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\miniprogram\\__init__.py\", line 28, in get_minium_driver\n    return APP[application](conf, *args, **kwargs)\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\miniprogram\\wx_minium.py\", line 151, in __init__\n    self.launch_weapp()\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\miniprogram\\base_driver\\minium_log.py\", line 225, in wrapper\n    result = func(*args, **kwargs)\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\miniprogram\\wx_minium.py\", line 579, in launch_weapp\n    self.launch_dev_tool()\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\miniprogram\\base_driver\\minium_log.py\", line 225, in wrapper\n    result = func(*args, **kwargs)\n  File \"E:\\zfy\\anaconda3\\envs\\minium\\lib\\site-packages\\minium\\miniprogram\\wx_minium.py\", line 756, in launch_dev_tool\n    raise MiniLaunchError(err_msg) from e\nminium.framework.exception.MiniLaunchError: Error: Port 9420 is in use (code 10)\n",
    "start_timestamp": 1716463510.2304327,
    "is_failure": false,
    "is_error": true,
    "module": "C:.Users.MSI-NB.Desktop.FILE.YuFanWenShu.\u836f\u5b66.\u5927\u56db\u4e0b.7 \u8f6f\u4ef6\u5b9e\u8df5.novel.novel-test.pageTest.BookDetailPage_test",
    "package": "pageTest",
    "failed_line_num": 440,
    "device": {
        "system_info": {
            "batteryLevel": 94,
            "benchmarkLevel": -1,
            "brand": "devtools",
            "memorySize": 2048,
            "model": "iPhone 6/7/8",
            "system": "iOS 10.0.1",
            "platform": "devtools",
            "pixelRatio": 2,
            "safeArea": {
                "top": 20,
                "left": 0,
                "right": 375,
                "bottom": 667,
                "width": 375,
                "height": 647
            },
            "screenWidth": 375,
            "screenHeight": 667,
            "screenTop": 48,
            "windowWidth": 375,
            "windowHeight": 619,
            "statusBarHeight": 20,
            "version": "8.0.5",
            "language": "zh_CN",
            "SDKVersion": "2.25.3",
            "enableDebug": false,
            "fontSizeScaleFactor": 0.85,
            "fontSizeSetting": 15,
            "mode": "default",
            "host": {
                "env": "WeChat"
            },
            "bluetoothEnabled": true,
            "locationEnabled": true,
            "wifiEnabled": true,
            "locationReducedAccuracy": true,
            "albumAuthorized": true,
            "bluetoothAuthorized": true,
            "cameraAuthorized": true,
            "locationAuthorized": true,
            "microphoneAuthorized": true,
            "notificationAuthorized": true,
            "notificationAlertAuthorized": true,
            "notificationBadgeAuthorized": true,
            "notificationSoundAuthorized": true,
            "phoneCalendarAuthorized": true,
            "deviceOrientation": "portrait",
            "devicePixelRatio": 2
        }
    },
    "log_filename": "run.log",
    "error_type": "MiniLaunchError",
    "error_value": "Error: Port 9420 is in use (code 10)",
    "error_stages": [
        "_miniSetUp"
    ],
    "screen_info": [],
    "step_info": [],
    "check_list": [],
    "assert_list": [],
    "weapp_log_path": "weapp.log",
    "request_log_path": "request.log",
    "stop_timestamp": 1716463741.9267018,
    "appId": "",
    "appName": "",
    "source": {
        "code": [
            "    def _miniSetUp(self):\n",
            "        super(MiniTest, self)._miniSetUp()\n",
            "        self._is_perf_setup = False\n",
            "        self._is_audits_setup = False\n",
            "        logger.info(\"=========Current case: %s=========\" % self._testMethodName)\n",
            "        if self.__will_retry is not None:\n",
            "            self.logger.warning(f\"\u7b2c{FRAMEWORK_RETRY-self.__will_retry}\u6b21\u91cd\u8bd5\")\n",
            "        logger.info(\n",
            "            \"package info: %s, case info: %s.%s\"\n",
            "            % (\n",
            "                self.results.get(\"module\", \"\"),\n",
            "                self.__class__.__name__,\n",
            "                self._testMethodName,\n",
            "            )\n",
            "        )\n",
            "        if self.test_config.only_native:\n",
            "            logger.info(f\"Only native: {self.test_config.only_native}, setUp complete\")\n",
            "            return\n",
            "        else:\n",
            "            check_result = self._check_debug_connection()\n",
            "            if check_result != ResetError.OK:  # \u8c03\u8bd5\u901a\u9053\u4e0d\u901a\n",
            "                self.logger.warning(\"check debug connection fail\")\n",
            "                if check_result == ResetError.RELAUNCH_APP:\n",
            "                    full_reset()\n",
            "                    self._update_miniprogram(None, None)\n",
            "                elif check_result == ResetError.RELAUNCH_MINIPROGRAM:\n",
            "                    reset_minium()\n",
            "                    self._update_miniprogram(self.native, None)\n",
            "                self.init_miniprogram()\n",
            "\n",
            "            if check_result == ResetError.OK and self.test_config.check_mp_foreground:\n",
            "                ret = self.native and self.native.back_to_miniprogram()\n",
            "                if ret and ret != ResetError.OK:\n",
            "                    if ret == ResetError.RELAUNCH_APP or ret == ResetError.ERROR:\n",
            "                        self.logger.warning(\n",
            "                            \"back_to_miniprogram error, reset app, post native: %s, minium: %s\"\n",
            "                            % (id(self.mini), id(self.native))\n",
            "                        )\n",
            "                        full_reset()\n",
            "                        self._update_miniprogram(None, None)\n",
            "                        self.init_miniprogram()\n",
            "                    elif ret == ResetError.RELAUNCH_MINIPROGRAM:\n",
            "                        self.logger.warning(\n",
            "                            \"back_to_miniprogram error, reset miniprogram, post minium: %s\"\n",
            "                            % id(self.native)\n",
            "                        )\n",
            "                        reset_minium()\n",
            "                        self._update_miniprogram(self.native, None)\n",
            "                        self.init_miniprogram()\n",
            "            if self.test_config.auto_relaunch:\n",
            "                self.mini.app.go_home()\n",
            "        # \u4f53\u9a8c\u8bc4\u5206\u662f\u4e2a\u6574\u4f53\u7684\u8bc4\u4ef7\uff0c\u6bcf\u4e2acase\u592a\u77ed\u4e86\uff0c\u6ca1\u610f\u4e49\n",
            "        # if self.test_config.audits:\n",
            "        #     self._is_audits_setup = self._setup_audits()\n",
            "        self._app_launch_time = self.mini.last_launch_time\n",
            "        self._framework_capture(\"setup\")\n",
            "        self._is_perf_setup = self._setup_perf()\n",
            "        # update start_timestamp\n",
            "        self.results[\"start_timestamp\"] = time.time()\n",
            "        logger.info(\"=========case: %s start=========\" % self._testMethodName)\n"
        ],
        "start": 412
    },
    "filename": "result.json"
}